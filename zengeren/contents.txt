                            全ゲ連で話す事
                            ==============

Author: さくらんぼ
Date: 2011/02/12



Table of Contents
=================
1 今日の目標 
2 Lispのゲーム開発環境にて達成したい目標 
    2.1 コーディングが楽 
    2.2 速度 
    2.3 作業者が簡単に作業結果を確認できる環境 
3 その前に 
    3.1 Lispって何だっけ？ 
    3.2 Lispの特徴 
    3.3 つまり 
    3.4 良くある誤解 
    3.5 Common Lisp？ 
    3.6 言語の特徴おさらい 
4 Lispでのゲーム開発 
    4.1 環境について 
        4.1.1 quicklisp 
        4.1.2 lispbuilder-sdl 
        4.1.3 emacs + slime 
    4.2 コーディングについて 
        4.2.1 ゲームに使う道具 
        4.2.2 関数がオブジェクト 
        4.2.3 コンパイル不要(動的ロード) 
5 Lispの速度について 
    5.1 遅いの？ 
6 他の作業者が簡単に作業結果を確認できる環境 
    6.1 複数人開発の課題 
    6.2 目指したい流れ 
    6.3 DSL構築 
7 苦労する点 
8 まとめ 


1 今日の目標 
~~~~~~~~~~~~~
 + ゲーム開発にLispが適しているのを実感してほしい
ORG-VERSE-START
hoge
ORG-VERSE-END


Everything should be made as simple as possible,
but not any simpler -- Albert Einstein



  hogehgoe

2 Lispのゲーム開発環境にて達成したい目標 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

2.1 コーディングが楽 
=====================

- ゲームで利用する様なデータ構造は言語で提供していてほしい。
- メモリ管理とか自分でやりたくない
- コーディングする上のバッドノウハウを減らす

2.2 速度 
=========
- C言語よりは遅くて良いが、ゲームなので高速な処理が求められる。
 

2.3 作業者が簡単に作業結果を確認できる環境 
===========================================
- 何か編集したら即座にゲームに組込める
- コンパイル環境が不要

3 その前に 
~~~~~~~~~~~

3.1 Lispって何だっけ？ 
=======================

ORG-BLOCKQUOTE-START
 LISP（リスプ、LISt Processingの略）は、プログラミング言語の一種である。括弧を多用する独特の構文を持つ。
 LISPは比較的容易に実装できるため、非常に多くの方言が存在する。
 関数型言語に分類されるが、ほとんどのLISP方言は、変数への束縛だけでなく、代入やデータ構造の破壊的操作も可能という、手続き型言語の性格ももっている。
--- wikipediaより
ORG-BLOCKQUOTE-END




3.2 Lispの特徴 
===============

ORG-BLOCKQUOTE-START
LISP の特徴として以下のようなものがある。
ORG-BLOCKQUOTE-END

-  動的な型付け（値には型情報を持つが変数は型を持たない）
-  前置記法

ORG-BLOCKQUOTE-START
 コード自身を第一級（ファーストクラス）オブジェクトとして扱うことができる
 LISPは、全てのプログラミング言語の中でも2番目に古い高級言語であり、現在でも広く使われている。ただし、最古の高級言語FORTRANと同様に、言語仕様は初期と比べて大きく変化している。
--- wikipediaより
ORG-BLOCKQUOTE-END


3.3 つまり 
===========

カッコいい言語

3.4 良くある誤解 
=================

- インタプリタ
- 関数型に記述しないといけない
   - 代入ない
   - 逐次実行がない
- 型チェックがない    
- Emacs?

3.5 Common Lisp？ 
==================

- Common Lispの実際

3.6 言語の特徴おさらい 
=======================


4 Lispでのゲーム開発 
~~~~~~~~~~~~~~~~~~~~~

4.1 環境について 
=================

4.1.1 quicklisp 
----------------

4.1.2 lispbuilder-sdl 
----------------------

4.1.3 emacs + slime 
--------------------

4.2 コーディングについて 
=========================

コーディングがどういった面で楽になるのか？

4.2.1 ゲームに使う道具 
-----------------------
- ハッシュ
- クラス
- ベクタ
- リスト
- キュー
言語標準サポート

4.2.2 関数がオブジェクト 
-------------------------
- 関数ポインタとさようなら
深く考えないで関数が呼べるし、代入できる
- クロージャ

4.2.3 コンパイル不要(動的ロード) 
---------------------------------

5 Lispの速度について 
~~~~~~~~~~~~~~~~~~~~~

5.1 遅いの？ 
=============

C++のSTLとLispとRubyで比較してみた。

- 簡単なクラスの生成速度
- ベクターへの挿入
- 関数適用 

6 他の作業者が簡単に作業結果を確認できる環境 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

6.1 複数人開発の課題 
=====================

6.2 目指したい流れ 
===================

6.3 DSL構築 
============
LispだとDSLがうんぬん

7 苦労する点 
~~~~~~~~~~~~~

8 まとめ 
~~~~~~~~~


=hoge=

